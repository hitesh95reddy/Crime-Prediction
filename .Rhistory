test<-data.frame(latitude=lat,longitude=lon)
head(test)
test$pre<-(knn(train,test ,lab, k = 4, prob=TRUE))
test
head(test)
(knn(train,test ,lab, k = 4, prob=TRUE))
test<-data.frame(latitude=lat,longitude=lon)
head(test)
(knn(train,test ,lab, k = 4, prob=TRUE))
(knn(train,test ,lab, k = 3, prob=TRUE))
lat<-runif(10,50,60)
lon<- runif(10,-2,1)
test<-data.frame(latitude=lat,longitude=lon)
head(test)
(knn(train,test ,lab, k = 3, prob=TRUE))
test
?knn
attributes(.Last.value)
(knn(train,test ,lab, k = 3, prob=TRUE))$attr
(knn(train,test ,lab, k = 3, prob=TRUE))$attr[,]
(knn(train,test ,lab, k = 3, prob=TRUE))[attr]
(knn(train,test ,lab, k = 3, prob=TRUE))['attr']
attr(Results, 'prob')
attributes(Results, 'prob')
attr((knn(train,test ,lab, k = 3, prob=TRUE)), 'prob')
con <- dbConnect(RMySQL::MySQL(), dbname = "proj_crime_data",host = "127.0.0.1",port=3306,user="root",password="Hi123321")
data<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='Anti-social behaviour') and (crime_type!='Other theft') limit 52")
(data)
train<-data[c(4,5)]
head(train)
lab<-data$crime_type
(lab)
?runif()
lat<-runif(10,50,60)
lon<- runif(10,-2,1)
test<-data.frame(latitude=lat,longitude=lon)
ans<-test
head(test)
ans$prediction<-(knn(train,test ,lab, k = 3, prob=TRUE))
ans$probability<-attr((knn(train,test ,lab, k = 3, prob=TRUE)), 'prob')
ans
ans$addr<-revgeocode(c(ans$longitude1, ans$latitude1))
ans$addr<-revgeocode(c(ans$longitude, ans$latitude))
ans$addr<-revgeocode(c(ans$longitude[1], ans$latitude)[1])
?revgeocode
revgeocode(c(50, 4)
revgeocode(c(50, 4)
)
revgeocode(c(50, 4))
revgeocode(c(4, 50))
revgeocode(c(test))
revgeocode((test$longitude,test$latitude))
revgeocode(c(test$longitude,test$latitude))
ans$textAddress <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), ans$longitude, ans$latitude)
ans
con <- dbConnect(RMySQL::MySQL(), dbname = "proj_crime_data",host = "127.0.0.1",port=3306,user="root",password="Hi123321")
data<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='Anti-social behaviour') and (crime_type!='Other theft') limit 52")
(data)
train<-data[c(4,5)]
head(train)
lab<-data$crime_type
(lab)
?runif()
lat<-runif(10,50,60)
lon<- runif(10,-2,1)
test<-data.frame(latitude=lat,longitude=lon)
ans<-test
head(test)
ans$prediction<-(knn(train,test ,lab, k = 3, prob=TRUE))
ans$probability<-attr((knn(train,test ,lab, k = 3, prob=TRUE)), 'prob')
ans$addr<-revgeocode(c(ans$longitude[1], ans$latitude)[1])
ans$probability<-attr((knn(train,test ,lab, k = 3, prob=TRUE)), 'prob')
ans$textAddress <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), ans$longitude, ans$latitude)
ans
lat<-runif(10,50,60)
lon<- runif(10,-2,1)
test<-data.frame(latitude=lat,longitude=lon)
ans<-test
head(test)
ans$prediction<-(knn(train,test ,lab, k = 3, prob=TRUE))
ans$probability<-attr((knn(train,test ,lab, k = 3, prob=TRUE)), 'prob')
ans$textAddress <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), ans$longitude, ans$latitude)
ans
train<-data[c(4,5)]
head(train)
lab<-data$crime_type
(lab)
?runif()
lat<-runif(10,50,60)
lon<- runif(10,-2,-1)
test<-data.frame(latitude=lat,longitude=lon)
ans<-test
head(test)
ans$prediction<-(knn(train,test ,lab, k = 3, prob=TRUE))
ans$probability<-attr((knn(train,test ,lab, k = 3, prob=TRUE)), 'prob')
ans$textAddress <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), ans$longitude, ans$latitude)
ans
lon<- runif(10,-3,-2)
test<-data.frame(latitude=lat,longitude=lon)
ans<-test
head(test)
ans$prediction<-(knn(train,test ,lab, k = 3, prob=TRUE))
ans$probability<-attr((knn(train,test ,lab, k = 3, prob=TRUE)), 'prob')
ans$textAddress <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), ans$longitude, ans$latitude)
ans
lat<-runif(10,50,60)
lon<- runif(10,-3,-2)
test<-data.frame(latitude=lat,longitude=lon)
lat<-runif(10,50,57)
lon<- runif(10,-3,-2)
test<-data.frame(latitude=lat,longitude=lon)
ans<-test
head(test)
ans$prediction<-(knn(train,test ,lab, k = 3, prob=TRUE))
ans$probability<-attr((knn(train,test ,lab, k = 3, prob=TRUE)), 'prob')
ans$textAddress <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), ans$longitude, ans$latitude)
ans
lat<-runif(10,50,57)
lon<- runif(10,-3,-2)
test<-data.frame(latitude=lat,longitude=lon)
ans<-test
head(test)
ans$prediction<-(knn(train,test ,lab, k = 3, prob=TRUE))
ans$probability<-attr((knn(train,test ,lab, k = 3, prob=TRUE)), 'prob')
ans$textAddress <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), ans$longitude, ans$latitude)
ans
lat<-runif(10,55,57)
lon<- runif(10,-3,-2)
test<-data.frame(latitude=lat,longitude=lon)
ans<-test
head(test)
ans$prediction<-(knn(train,test ,lab, k = 3, prob=TRUE))
ans$probability<-attr((knn(train,test ,lab, k = 3, prob=TRUE)), 'prob')
ans$textAddress <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), ans$longitude, ans$latitude)
lat<-runif(10,50,53)
lon<- runif(10,-3,-2)
test<-data.frame(latitude=lat,longitude=lon)
ans<-test
head(test)
ans$prediction<-(knn(train,test ,lab, k = 3, prob=TRUE))
ans$probability<-attr((knn(train,test ,lab, k = 3, prob=TRUE)), 'prob')
ans$textAddress <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), ans$longitude, ans$latitude)
ans
lat<-runif(10,52,54)
lon<- runif(10,-3,-2)
test<-data.frame(latitude=lat,longitude=lon)
ans<-test
head(test)
ans$prediction<-(knn(train,test ,lab, k = 3, prob=TRUE))
ans$probability<-attr((knn(train,test ,lab, k = 3, prob=TRUE)), 'prob')
ans$textAddress <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), ans$longitude, ans$latitude)
ans
lat<-runif(10,52,54)
lon<- runif(10,-3,-2)
test<-data.frame(latitude=lat,longitude=lon)
ans<-test
head(test)
ans$prediction<-(knn(train,test ,lab, k = 4, prob=TRUE))
ans$probability<-attr((knn(train,test ,lab, k = 3, prob=TRUE)), 'prob')
ans$textAddress <- mapply(FUN = function(lon, lat) revgeocode(c(lon, lat)), ans$longitude, ans$latitude)
ans
test
tested<-ans
tested
require("plyr")
require("ggmap")
require("class")
require("googleVis")
require("RgoogleMaps")
require("e1071")
data<-read.csv("G://Final project//data//a//crime_data.csv")
info_needed<-data[c(5,6,11)]
model <- naiveBayes(Crime.type ~ ., data = info_needed)
head(info_needed[4,-3])
a<-predict(model, info_needed[4,-3])
plot(model$aprioriprobabilities)
model
?naiveBayes
plot(model$aprioriprobabilities)
plot(model)
plot(model$apriori)
head(info_needed[4,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
data<-read.csv("G://Final project//data//a//crime_data.csv")
info_needed<-head(data[c(5,6,11)],100)
model <- naiveBayes(Crime.type ~ ., data = info_needed)
head(info_needed[4,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
info_needed<-head(data[c(5,6,11)],50)
model <- naiveBayes(Crime.type ~ ., data = info_needed)
head(info_needed[4,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
info_needed<-head(data[c(5,6,11)],25)
model <- naiveBayes(Crime.type ~ ., data = info_needed)
head(info_needed[4,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
info_needed<-head(data[c(5,6,11)],50)
model <- naiveBayes(Crime.type ~ ., data = info_needed)
head(info_needed[4,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
info_needed<-head(data[c(5,6,11)],100)
model <- naiveBayes(Crime.type ~ ., data = info_needed)
head(info_needed[4,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
info_needed<-head(data[c(5,6,11)],100)
model <- naiveBayes(Crime.type ~ ., data = info_needed)
head(info_needed[4,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
info_needed<-head(data[c(5,6,11)],56)
model <- naiveBayes(Crime.type ~ ., data = info_needed)
head(info_needed[4,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
plot(model$apriori)
model
require("plyr")
require("ggmap")
require("class")
require("googleVis")
require("RgoogleMaps")
require("e1071")
data<-read.csv("G://Final project//data//a//crime_data.csv")
info_needed<-head(data[c(5,6,11)],56)
info_needed
con <- dbConnect(RMySQL::MySQL(), dbname = "proj_crime_data",host = "127.0.0.1",port=3306,user="root",password="Hi123321")
data<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='Anti-social behaviour') and (crime_type!='Other theft') limit 52")
head(data)
head(info_needed[4,-3])
info_needed<-head(data[c(5,4,3)],56)
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[4,-3])
a<-predict(model, info_needed[4,-3])
a
plot(model$apriori)
model
con <- dbConnect(RMySQL::MySQL(), dbname = "proj_crime_data",host = "127.0.0.1",port=3306,user="root",password="Hi123321")
data<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='Anti-social behaviour') and (crime_type!='Other theft') limit 52")
head(data)
info_needed<-head(data[c(5,4,3)],117)
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[4,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
data<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Other theft') limit 52")
head(data)
info_needed<-head(data[c(5,4,3)],117)
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[4,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
data<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Other theft') limit 117")
head(data)
info_needed<-head(data[c(5,4,3)],117)
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[4,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
con <- dbConnect(RMySQL::MySQL(), dbname = "proj_crime_data",host = "127.0.0.1",port=3306,user="root",password="Hi123321")
data<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Other theft') and (crime_type!='vehicle crime') limit 117")
head(data)
info_needed<-head(data[c(5,4,3)],117)
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[4,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
data<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Theft from the person') and (crime_type!='Other theft') and (crime_type!='vehicle crime') limit 117")
head(data)
info_needed<-head(data[c(5,4,3)],117)
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[4,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
data<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Theft from the person') and (crime_type!='Other theft') and (crime_type!='vehicle crime')")
head(data)
info_needed<-(data[c(5,4,3)])
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[100,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
data1<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Anti-social behaviour') and (crime_type!='Theft from the person') and (crime_type!='Other theft') and (crime_type!='vehicle crime') limit 83")
data2<-data1<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type='Anti-social behaviour') limit 17" )
head(data)
info_needed<-head(rbind(data1,data2)[5,4,3],100)
info_needed
info_needed<-(rbind(data1,data2)
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[100,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
info_needed<-(rbind(data1,data2))
info_needed
data1<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Anti-social behaviour') and (crime_type!='Theft from the person') and (crime_type!='Other theft') and (crime_type!='vehicle crime') limit 83")
data2<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type='Anti-social behaviour') limit 17" )
head(data)
info_needed<-(rbind(data1,data2))
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[100,-3])
info_needed<-info_needed[5,4,3]
model <- naiveBayes(crime_type ~ ., data = info_needed)
info_needed
info_needed<-info_needed(5,4,3)
info_needed<-(rbind(data1,data2))
info_needed<-info_needed(5,4,3)
info_needed<-(rbind(data1,data2))
info_needed<-info_needed[5]
info_needed
info_needed<-(rbind(data1,data2))
info_needed<-info_needed[c(5,4,3)]
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[100,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
data1<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Anti-social behaviour') and (crime_type!='Theft from the person') and (crime_type!='Other theft') and (crime_type!='vehicle crime') limit 133")
data2<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type='Anti-social behaviour') limit 27" )
head(data)
info_needed<-(rbind(data1,data2))
info_needed<-info_needed[c(5,4,3)]
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[100,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
data1<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Bicycle theft') and (crime_type!='Anti-social behaviour') and (crime_type!='Theft from the person') and (crime_type!='Other theft') and (crime_type!='vehicle crime') limit 133")
data2<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type='Anti-social behaviour') limit 27" )
head(data)
info_needed<-(rbind(data1,data2))
info_needed<-info_needed[c(5,4,3)]
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[100,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
data1<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Bicycle theft') and (crime_type!='Anti-social behaviour') and (crime_type!='Theft from the person') and (crime_type!='Other theft') and (crime_type!='vehicle crime') limit 77")
data2<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type='Anti-social behaviour') limit 23" )
head(data)
info_needed<-(rbind(data1,data2))
info_needed<-info_needed[c(5,4,3)]
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[100,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
data1<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Bicycle theft') and (crime_type!='Anti-social behaviour') and (crime_type!='Theft from the person') and (crime_type!='Other theft') and (crime_type!='vehicle crime') limit 100")
data2<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type='Anti-social behaviour') limit 23" )
head(data)
info_needed<-(rbind(data1,data2))
info_needed<-info_needed[c(5,4,3)]
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[100,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
data2<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type='Anti-social behaviour') limit 17" )
head(data)
info_needed<-(rbind(data1,data2))
info_needed<-info_needed[c(5,4,3)]
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[100,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
con <- dbConnect(RMySQL::MySQL(), dbname = "proj_crime_data",host = "127.0.0.1",port=3306,user="root",password="Hi123321")
data1<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Bicycle theft') and (crime_type!='Anti-social behaviour') and (crime_type!='Theft from the person') and (crime_type!='Other theft') and (crime_type!='vehicle crime') limit 100")
data2<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type='Anti-social behaviour') limit 17" )
head(data)
info_needed<-(rbind(data1,data2))
info_needed<-info_needed[c(5,4,3)]
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
head(info_needed[100,-3])
a<-predict(model, info_needed[4,-3])
plot(model$apriori)
model
a
con <- dbConnect(RMySQL::MySQL(), dbname = "proj_crime_data",host = "127.0.0.1",port=3306,user="root",password="Hi123321")
data1<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Bicycle theft') and (crime_type!='Anti-social behaviour') and (crime_type!='Theft from the person') and (crime_type!='Other theft') and (crime_type!='vehicle crime') limit 100")
data2<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type='Anti-social behaviour') limit 17" )
info_needed<-(rbind(data1,data2))
info_needed<-info_needed[c(5,4,3)]
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
model
data1<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Bicycle theft') and (crime_type!='Anti-social behaviour') and (crime_type!='Theft from the person') and (crime_type!='Other theft') and (crime_type!='vehicle crime') limit 83")
data2<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type='Anti-social behaviour') limit 17" )
info_needed<-(rbind(data1,data2))
info_needed<-info_needed[c(5,4,3)]
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed)
model
head(info_needed[100,-3])
a<-predict(model, info_needed[100,-3])
a
?predict
?naiveBayes
predict(model, info_needed[100,-3])
(info_needed[100,-3])
predict(model, info_needed[100,-3])
model <- naiveBayes(Class ~ ., data = HouseVotes84, laplace = 3)
pred <- predict(model, HouseVotes84[,-1])
table(pred, HouseVotes84$Class)
data(HouseVotes84)
data1<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Bicycle theft') and (crime_type!='Anti-social behaviour') and (crime_type!='Theft from the person') and (crime_type!='Other theft') and (crime_type!='vehicle crime') limit 83")
data2<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type='Anti-social behaviour') limit 17" )
info_needed<-(rbind(data1,data2))
info_needed<-info_needed[c(5,4,3)]
model <- naiveBayes(crime_type ~ ., data = info_needed, laplace=3)
pred <- predict(model, info_needed[,-3])
table(pred, info_needed$crime_type)
pred
data1<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type!='public order') and (crime_type!='Bicycle theft') and (crime_type!='Anti-social behaviour') and (crime_type!='Theft from the person') and (crime_type!='Other theft') and (crime_type!='vehicle crime') limit 83")
data2<-dbGetQuery(con, "SELECT * FROM crime_info where (crime_type='Anti-social behaviour') limit 17" )
info_needed<-(rbind(data1,data2))
info_needed<-info_needed[c(5,4,3)]
info_needed
model <- naiveBayes(crime_type ~ ., data = info_needed, laplace=3)
pred <- predict(model, info_needed)
pred
table(pred, info_needed$crime_type)
model
data(Titanic)
m <- naiveBayes(Survived ~ ., data = Titanic)
m
predict(m, as.data.frame(Titanic))
data(Titanic)
head(Titanic)
(Titanic)
m <- naiveBayes(Survived ~ ., data = Titanic)
m
predict(m, as.data.frame(Titanic))
install.packages("factoextra")
require("plyr")
require("ggmap")
require("class")
require("googleVis")
require("RgoogleMaps")
require("e1071")
require("RMySQL")
con <- dbConnect(RMySQL::MySQL(), dbname = "proj_crime_data",host = "127.0.0.1",port=3306,user="root",password="Hi123321")
data2<-dbGetQuery(con, "SELECT * FROM crime_info")
test2=data2
tail(test2)
test2$Year<-as.Date((as.character(substring(test2$DATE,1,10))))
p<-count(test2,c("Year","crime_type"))
M <- gvisMotionChart(p, "crime_type", "Year", date.format = "\\%Y\\%m\\%d")
plot(M)
require("plyr")
require("ggmap")
require("class")
require("googleVis")
require("RgoogleMaps")
require("e1071")
require("RMySQL")
con <- dbConnect(RMySQL::MySQL(), dbname = "proj_crime_data",host = "127.0.0.1",port=3306,user="root",password="Hi123321")
data2<-dbGetQuery(con, "SELECT * FROM crime_info")
test2=data2
tail(test2)
test2$Year<-as.Date((as.character(substring(test2$DATE,1,10))))
p<-count(test2,c("Year","crime_type"))
M <- gvisMotionChart(p, "crime_type", "Year", date.format = "\\%Y\\%m\\%d")
plot(M)
require("plyr")
require("ggmap")
require("class")
require("googleVis")
require("RgoogleMaps")
require("e1071")
require("RMySQL")
con <- dbConnect(RMySQL::MySQL(), dbname = "proj_crime_data",host = "127.0.0.1",port=3306,user="root",password="Hi123321")
data2<-dbGetQuery(con, "SELECT * FROM crime_info")
test2=data2
tail(test2)
test2$Year<-as.Date((as.character(substring(test2$DATE,1,10))))
p<-count(test2,c("Year","crime_type"))
M <- gvisMotionChart(p, "crime_type", "Year", date.format = "\\%Y\\%m\\%d")
plot(M)
